DEFINITION MODULE INIData;

        (************************************************************)
        (*                                                          *)
        (*               Looking after INI file data                *)
        (*                                                          *)
        (*    Started:        30 March 2000                         *)
        (*    Last edited:    18 January 2002                       *)
        (*    Status:         OK                                    *)
        (*                                                          *)
        (************************************************************)


FROM SYSTEM IMPORT
    (* type *)  LOC;

FROM OS2 IMPORT
    (* type *)  HINI, HWND;

TYPE
    StringReadState;            (* is private *)

PROCEDURE OpenINIFile (filename: ARRAY OF CHAR): HINI;

    (* Opens an INI file, returns its handle. *)

PROCEDURE CloseINIFile (hini: HINI);

    (* Closes an INI file. *)

PROCEDURE ItemSize (hini: HINI;  application, key: ARRAY OF CHAR;
                                VAR (*OUT*) size: CARDINAL): BOOLEAN;

    (* Sets size to the size in bytes of the given INI file entry,      *)
    (* or returns FALSE if there is no such entry.                      *)

PROCEDURE INIGet (hini: HINI;  application, key: ARRAY OF CHAR;
                            VAR (*OUT*) result: ARRAY OF LOC): BOOLEAN;

    (* Retrieves the value of a variable from the INI file.  Returns    *)
    (* FALSE if the variable was not found.                             *)

PROCEDURE INIGetString (hini: HINI;  name1, name2: ARRAY OF CHAR;
                                    VAR (*OUT*) variable: ARRAY OF CHAR): BOOLEAN;

    (* Like INIGet, but we accept any size data that will fit in the variable,  *)
    (* and we add a Nul terminator in the case of a size mismatch.              *)

PROCEDURE INIPut (hini: HINI;  name1, name2: ARRAY OF CHAR;
                                   variable: ARRAY OF LOC);

    (* Writes a fixed-size datum to the INI file. *)

PROCEDURE INIPutBinary (hini: HINI;  name1, name2: ARRAY OF CHAR;
                        VAR (*IN*) variable: ARRAY OF LOC;  amount: CARDINAL);

    (* Writes data to the INI file. *)

PROCEDURE INIPutString (hini: HINI;  name1, name2: ARRAY OF CHAR;
                                                   string: ARRAY OF CHAR);

    (* Writes a character string to the INI file. *)

PROCEDURE GetStringList (hini: HINI;  app, key: ARRAY OF CHAR;
                                   VAR (*OUT*) state: StringReadState);

    (* Initialisation in preparation for a "NextString" operation. *)

PROCEDURE NextString (state: StringReadState;  VAR (*OUT*) result: ARRAY OF CHAR);

    (* Reads the next character string from a string-of-strings field.  *)
    (* An empty string is returned when we have run out of strings.     *)

PROCEDURE CloseStringList (VAR (*INOUT*) state: StringReadState);

    (* Must be called to release the memory used in fetching a  *)
    (* string of strings.                                       *)

PROCEDURE INIDeleteApp (hini: HINI;  app: ARRAY OF CHAR);

    (* Deletes an application from the INI file. *)

PROCEDURE INIRenameApp (hini: HINI;  oldapp, newapp: ARRAY OF CHAR);

    (* Changes the name of an application, retaining the data. *)

PROCEDURE INIDeleteKey (hini: HINI;  app, key: ARRAY OF CHAR);

    (* Deletes a key from the INI file. *)

PROCEDURE OurDirectory (VAR (*OUT*) dirname: ARRAY OF CHAR);

    (* Tells the caller the name of the program directory. *)

PROCEDURE SetInitialWindowPosition (hwnd: HWND;
                                    INIFileName, label: ARRAY OF CHAR);

    (* If this window has a previously stored position in our INI file, *)
    (* positions the window to that position.                           *)

PROCEDURE StoreWindowPosition (hwnd: HWND;
                               INIFileName, label: ARRAY OF CHAR);

    (* Saves the location of this window in our INI file. *)

END INIData.

